import{defineComponent as t,toRefs as e,computed as i,ref as o,openBlock as a,createElementBlock as s,normalizeStyle as n}from"vue";import*as l from"monaco-editor";var d=t({name:"MonacoEditor",props:{diffEditor:{type:Boolean,default:!1},width:{type:[String,Number],default:"100%"},height:{type:[String,Number],default:"100%"},original:String,value:String,language:{type:String,default:"javascript"},theme:{type:String,default:"vs"},options:{type:Object,default:()=>({})},validation:{type:Object,default:()=>({})}},emits:["editorWillMount","editorDidMount","change"],setup(t){const{width:a,height:s}=e(t),n=i((()=>({width:a.value.toString().includes("%")?a.value:`${a.value}px`,height:s.value.toString().includes("%")?s.value:`${s.value}px`,"text-align":"left"}))),l=o("");return{style:n,modelId:l,updateModelId:function(){l.value=`file:///file-${(new Date).getTime()}.yaml`}}},mounted(){this.initMonaco()},beforeUnmount(){l.editor.getModel(this.modelId)?.dispose(),this.$monacoValidationOptions&&(this.$monacoValidationOptions.schemas=this.$monacoValidationOptions.schemas.filter((t=>!t.fileMatch.includes(this.modelId)))),this.editor&&this.editor.dispose()},methods:{async initMonaco(){this.updateModelId(),this.$emit("editorWillMount",this.monaco);const{value:t,language:e,theme:i,options:o,original:a,validation:s}=this;if(this.diffEditor){const s=l.editor.createModel(a,e),n=l.editor.createModel(t,e);this.editor=l.editor.createDiffEditor(this.$el,{automaticLayout:!0,theme:i,fixedOverflowWidgets:!0,...o}),this.editor.setModel({original:s,modified:n})}else{const a=l.editor.createModel(t,e,l.Uri.parse(this.modelId));if(s.uri)if(s.schema?.type){const t=[...this.$monacoValidationOptions?.schemas||[],{fileMatch:[this.modelId],schema:s.schema,uri:s.uri}];this.$monacoValidationOptions&&(this.$monacoValidationOptions.schemas=t),this.$monacoYaml&&this.$monacoYaml.update({schemas:t}),l.languages.json.jsonDefaults.setDiagnosticsOptions({validate:!0,enableSchemaRequest:!1,schemas:t,allowComments:!0})}else{const t=await fetch(s.uri);if(t.ok){const e=await t.json(),i=[...this.$monacoValidationOptions?.schemas||[],{fileMatch:[this.modelId],schema:e,uri:s.uri}];this.$monacoValidationOptions&&(this.$monacoValidationOptions.schemas=i),this.$monacoYaml&&this.$monacoYaml.update({schemas:i,enableSchemaRequest:!0}),l.languages.json.jsonDefaults.setDiagnosticsOptions({validate:!0,enableSchemaRequest:!0,schemas:i,allowComments:!0})}else this.$monacoYaml&&this.$monacoYaml.update({validate:!1}),l.languages.json.jsonDefaults.setDiagnosticsOptions({validate:!1})}this.editor=l.editor.create(this.$el,{automaticLayout:!0,model:a,theme:i,fixedOverflowWidgets:!0,...o})}const n=this._getEditor();n.onDidChangeModelContent((t=>{const e=n.getValue();this.value!==e&&this.$emit("change",e,t)})),this.$emit("editorDidMount",this.editor)},_setValue(t){const e=this._getEditor();if(e)return e.setValue(t)},_getValue(){const t=this._getEditor();return t?t.getValue():""},_getEditor(){return this.editor?this.diffEditor?this.editor.getModifiedEditor():this.editor:null},_setOriginal(){const{original:t}=this.editor.getModel();t.setValue(this.original)}},watch:{options:{deep:!0,handler(t){this.editor.updateOptions(t)}},value(){this.value!==this._getValue()&&this._setValue(this.value)},original(){this._setOriginal()},language(){if(this.editor)if(this.diffEditor){const{original:t,modified:e}=this.editor.getModel();l.editor.setModelLanguage(t,this.language),l.editor.setModelLanguage(e,this.language)}else l.editor.setModelLanguage(this.editor.getModel(),this.language)},theme(){l.editor.setTheme(this.theme)}}});d.render=function(t,e,i,o,l,d){return a(),s("div",{class:"monaco-editor-vue3",style:n(t.style)},null,4)};export{d as default};